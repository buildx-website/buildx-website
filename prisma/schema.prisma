
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String      @id @default(cuid())
  email         String      @unique
  name          String
  createdAt     DateTime    @default(now())
  last_login    DateTime?   @default(now())
  apiKey        String?     @default("")
  projects      Project[]
  userModel     UserModels?
  emailVerified Boolean
  image         String?
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]

  @@map("user")
}

model Project {
  id          String           @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime         @default(now())
  ownerId     String
  status      ProjectStatus
  framework   ProjectFramework
  messages    Messages[]
  owner       User             @relation(fields: [ownerId], references: [id])
}

model Messages {
  id         String   @id @default(cuid())
  role       String
  content    String
  imgUrl     String?
  createdAt  DateTime @default(now())
  projectId  String
  ignoreInUI Boolean? @default(false)
  project    Project  @relation(fields: [projectId], references: [id])
}

model Models {
  id                String       @id @default(cuid())
  name              String       @unique
  displayName       String?
  default           Boolean?     @default(false)
  inputImageSupport Boolean?     @default(false)
  userModels        UserModels[]
}

model UserModels {
  id        String   @id @default(cuid())
  userId    String   @unique
  modelId   String
  createdAt DateTime @default(now())
  model     Models   @relation(fields: [modelId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

enum ProjectFramework {
  REACT
  NEXT
  NODE
  UNDEFINED
}

enum ProjectStatus {
  CREATED
  DELETED
  ARCHIVED
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
